/*
 * generated by Xtext 2.30.0
 */
grammar InternalFigure;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.ipsl.figure.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.ipsl.figure.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.ipsl.figure.services.FigureGrammarAccess;

}

@parser::members {

 	private FigureGrammarAccess grammarAccess;

    public InternalFigureParser(TokenStream input, FigureGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "PROGRAMME";
   	}

   	@Override
   	protected FigureGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePROGRAMME
entryRulePROGRAMME returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPROGRAMMERule()); }
	iv_rulePROGRAMME=rulePROGRAMME
	{ $current=$iv_rulePROGRAMME.current; }
	EOF;

// Rule PROGRAMME
rulePROGRAMME returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPROGRAMMEAccess().getFigFIGUREParserRuleCall_0());
			}
			lv_fig_0_0=ruleFIGURE
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getPROGRAMMERule());
				}
				set(
					$current,
					"fig",
					lv_fig_0_0,
					"org.xtext.ipsl.figure.Figure.FIGURE");
				afterParserOrEnumRuleCall();
			}
		)
	)?
;

// Entry rule entryRuleFIGURE
entryRuleFIGURE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFIGURERule()); }
	iv_ruleFIGURE=ruleFIGURE
	{ $current=$iv_ruleFIGURE.current; }
	EOF;

// Rule FIGURE
ruleFIGURE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Figure'
		{
			newLeafNode(otherlv_0, grammarAccess.getFIGUREAccess().getFigureKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFIGUREAccess().getNomCERCLEParserRuleCall_1_0_0());
					}
					lv_nom_1_1=ruleCERCLE
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFIGURERule());
						}
						set(
							$current,
							"nom",
							lv_nom_1_1,
							"org.xtext.ipsl.figure.Figure.CERCLE");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getFIGUREAccess().getNomRECTANGLEParserRuleCall_1_0_1());
					}
					lv_nom_1_2=ruleRECTANGLE
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFIGURERule());
						}
						set(
							$current,
							"nom",
							lv_nom_1_2,
							"org.xtext.ipsl.figure.Figure.RECTANGLE");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getFIGUREAccess().getNomCARREParserRuleCall_1_0_2());
					}
					lv_nom_1_3=ruleCARRE
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFIGURERule());
						}
						set(
							$current,
							"nom",
							lv_nom_1_3,
							"org.xtext.ipsl.figure.Figure.CARRE");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleDEBUT
entryRuleDEBUT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDEBUTRule()); }
	iv_ruleDEBUT=ruleDEBUT
	{ $current=$iv_ruleDEBUT.current.getText(); }
	EOF;

// Rule DEBUT
ruleDEBUT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='BEGIN'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getDEBUTAccess().getBEGINKeyword());
	}
;

// Entry rule entryRuleCARRE
entryRuleCARRE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCARRERule()); }
	iv_ruleCARRE=ruleCARRE
	{ $current=$iv_ruleCARRE.current; }
	EOF;

// Rule CARRE
ruleCARRE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_nom_0_0='Carre'
				{
					newLeafNode(lv_nom_0_0, grammarAccess.getCARREAccess().getNomCarreKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCARRERule());
					}
					setWithLastConsumed($current, "nom", lv_nom_0_0, "Carre");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCARREAccess().getDebutDEBUTParserRuleCall_1_0());
				}
				lv_debut_1_0=ruleDEBUT
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCARRERule());
					}
					set(
						$current,
						"debut",
						lv_debut_1_0,
						"org.xtext.ipsl.figure.Figure.DEBUT");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='cote'
			{
				newLeafNode(otherlv_2, grammarAccess.getCARREAccess().getCoteKeyword_2_0());
			}
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getCARREAccess().getColonKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCARREAccess().getCoteREELParserRuleCall_2_2_0());
					}
					lv_cote_4_0=ruleREEL
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCARRERule());
						}
						set(
							$current,
							"cote",
							lv_cote_4_0,
							"org.xtext.ipsl.figure.Figure.REEL");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getCARREAccess().getSemicolonKeyword_2_3());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCARREAccess().getRetourRETURNParserRuleCall_3_0());
				}
				lv_retour_6_0=ruleRETURN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCARRERule());
					}
					set(
						$current,
						"retour",
						lv_retour_6_0,
						"org.xtext.ipsl.figure.Figure.RETURN");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCARREAccess().getEndENDParserRuleCall_4_0());
				}
				lv_end_7_0=ruleEND
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCARRERule());
					}
					set(
						$current,
						"end",
						lv_end_7_0,
						"org.xtext.ipsl.figure.Figure.END");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRECTANGLE
entryRuleRECTANGLE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRECTANGLERule()); }
	iv_ruleRECTANGLE=ruleRECTANGLE
	{ $current=$iv_ruleRECTANGLE.current; }
	EOF;

// Rule RECTANGLE
ruleRECTANGLE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_nom_0_0='Rectangle'
				{
					newLeafNode(lv_nom_0_0, grammarAccess.getRECTANGLEAccess().getNomRectangleKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRECTANGLERule());
					}
					setWithLastConsumed($current, "nom", lv_nom_0_0, "Rectangle");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRECTANGLEAccess().getDebutDEBUTParserRuleCall_1_0());
				}
				lv_debut_1_0=ruleDEBUT
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRECTANGLERule());
					}
					set(
						$current,
						"debut",
						lv_debut_1_0,
						"org.xtext.ipsl.figure.Figure.DEBUT");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getRECTANGLEAccess().getUnorderedGroup_2());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRECTANGLEAccess().getUnorderedGroup_2(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getRECTANGLEAccess().getUnorderedGroup_2(), 0);
					}
								({true}?=>(otherlv_3='longueur'
								{
									newLeafNode(otherlv_3, grammarAccess.getRECTANGLEAccess().getLongueurKeyword_2_0_0());
								}
								otherlv_4=':'
								{
									newLeafNode(otherlv_4, grammarAccess.getRECTANGLEAccess().getColonKeyword_2_0_1());
								}
								(
									(
										{
											newCompositeNode(grammarAccess.getRECTANGLEAccess().getLongueurREELParserRuleCall_2_0_2_0());
										}
										lv_longueur_5_0=ruleREEL
										{
											if ($current==null) {
												$current = createModelElementForParent(grammarAccess.getRECTANGLERule());
											}
											set(
												$current,
												"longueur",
												lv_longueur_5_0,
												"org.xtext.ipsl.figure.Figure.REEL");
											afterParserOrEnumRuleCall();
										}
									)
								)
								otherlv_6=';'
								{
									newLeafNode(otherlv_6, grammarAccess.getRECTANGLEAccess().getSemicolonKeyword_2_0_3());
								}
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRECTANGLEAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRECTANGLEAccess().getUnorderedGroup_2(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getRECTANGLEAccess().getUnorderedGroup_2(), 1);
					}
								({true}?=>(otherlv_7='largeur'
								{
									newLeafNode(otherlv_7, grammarAccess.getRECTANGLEAccess().getLargeurKeyword_2_1_0());
								}
								otherlv_8=':'
								{
									newLeafNode(otherlv_8, grammarAccess.getRECTANGLEAccess().getColonKeyword_2_1_1());
								}
								(
									(
										{
											newCompositeNode(grammarAccess.getRECTANGLEAccess().getLargeurREELParserRuleCall_2_1_2_0());
										}
										lv_largeur_9_0=ruleREEL
										{
											if ($current==null) {
												$current = createModelElementForParent(grammarAccess.getRECTANGLERule());
											}
											set(
												$current,
												"largeur",
												lv_largeur_9_0,
												"org.xtext.ipsl.figure.Figure.REEL");
											afterParserOrEnumRuleCall();
										}
									)
								)
								otherlv_10=';'
								{
									newLeafNode(otherlv_10, grammarAccess.getRECTANGLEAccess().getSemicolonKeyword_2_1_3());
								}
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRECTANGLEAccess().getUnorderedGroup_2());
					}
				)
			)
					)+
					{getUnorderedGroupHelper().canLeave(grammarAccess.getRECTANGLEAccess().getUnorderedGroup_2())}?
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getRECTANGLEAccess().getUnorderedGroup_2());
				}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRECTANGLEAccess().getRetourRETURNParserRuleCall_3_0());
				}
				lv_retour_11_0=ruleRETURN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRECTANGLERule());
					}
					set(
						$current,
						"retour",
						lv_retour_11_0,
						"org.xtext.ipsl.figure.Figure.RETURN");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRECTANGLEAccess().getEndENDParserRuleCall_4_0());
				}
				lv_end_12_0=ruleEND
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRECTANGLERule());
					}
					set(
						$current,
						"end",
						lv_end_12_0,
						"org.xtext.ipsl.figure.Figure.END");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCERCLE
entryRuleCERCLE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCERCLERule()); }
	iv_ruleCERCLE=ruleCERCLE
	{ $current=$iv_ruleCERCLE.current; }
	EOF;

// Rule CERCLE
ruleCERCLE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_nom_0_0='Cercle'
				{
					newLeafNode(lv_nom_0_0, grammarAccess.getCERCLEAccess().getNomCercleKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCERCLERule());
					}
					setWithLastConsumed($current, "nom", lv_nom_0_0, "Cercle");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCERCLEAccess().getDebutDEBUTParserRuleCall_1_0());
				}
				lv_debut_1_0=ruleDEBUT
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCERCLERule());
					}
					set(
						$current,
						"debut",
						lv_debut_1_0,
						"org.xtext.ipsl.figure.Figure.DEBUT");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='rayon'
			{
				newLeafNode(otherlv_2, grammarAccess.getCERCLEAccess().getRayonKeyword_2_0());
			}
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getCERCLEAccess().getColonKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCERCLEAccess().getRayonREELParserRuleCall_2_2_0());
					}
					lv_rayon_4_0=ruleREEL
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCERCLERule());
						}
						set(
							$current,
							"rayon",
							lv_rayon_4_0,
							"org.xtext.ipsl.figure.Figure.REEL");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getCERCLEAccess().getSemicolonKeyword_2_3());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCERCLEAccess().getRetourRETURNParserRuleCall_3_0());
				}
				lv_retour_6_0=ruleRETURN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCERCLERule());
					}
					set(
						$current,
						"retour",
						lv_retour_6_0,
						"org.xtext.ipsl.figure.Figure.RETURN");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCERCLEAccess().getEndENDParserRuleCall_4_0());
				}
				lv_end_7_0=ruleEND
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCERCLERule());
					}
					set(
						$current,
						"end",
						lv_end_7_0,
						"org.xtext.ipsl.figure.Figure.END");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRETURN
entryRuleRETURN returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRETURNRule()); }
	iv_ruleRETURN=ruleRETURN
	{ $current=$iv_ruleRETURN.current; }
	EOF;

// Rule RETURN
ruleRETURN returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='return'
		{
			newLeafNode(otherlv_0, grammarAccess.getRETURNAccess().getReturnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRETURNAccess().getResultatRETOURParserRuleCall_1_0());
				}
				lv_resultat_1_0=ruleRETOUR
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRETURNRule());
					}
					set(
						$current,
						"resultat",
						lv_resultat_1_0,
						"org.xtext.ipsl.figure.Figure.RETOUR");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getRETURNAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleRETOUR
entryRuleRETOUR returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRETOURRule()); }
	iv_ruleRETOUR=ruleRETOUR
	{ $current=$iv_ruleRETOUR.current.getText(); }
	EOF;

// Rule RETOUR
ruleRETOUR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='surface'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRETOURAccess().getSurfaceKeyword_0());
		}
		    |
		kw='perimetre'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRETOURAccess().getPerimetreKeyword_1());
		}
	)
;

// Entry rule entryRuleEND
entryRuleEND returns [String current=null]:
	{ newCompositeNode(grammarAccess.getENDRule()); }
	iv_ruleEND=ruleEND
	{ $current=$iv_ruleEND.current.getText(); }
	EOF;

// Rule END
ruleEND returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='END'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getENDAccess().getENDKeyword());
	}
;

// Entry rule entryRuleREEL
entryRuleREEL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getREELRule()); }
	iv_ruleREEL=ruleREEL
	{ $current=$iv_ruleREEL.current; }
	EOF;

// Rule REEL
ruleREEL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_reel_0_0=RULE_DOUBLE
			{
				newLeafNode(lv_reel_0_0, grammarAccess.getREELAccess().getReelDOUBLETerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getREELRule());
				}
				setWithLastConsumed(
					$current,
					"reel",
					lv_reel_0_0,
					"org.xtext.ipsl.figure.Figure.DOUBLE");
			}
		)
	)
;

RULE_DOUBLE : '-'? RULE_INT ('.' RULE_INT)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
