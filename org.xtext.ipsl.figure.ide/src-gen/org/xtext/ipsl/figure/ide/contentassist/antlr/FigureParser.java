/*
 * generated by Xtext 2.30.0
 */
package org.xtext.ipsl.figure.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ipsl.figure.ide.contentassist.antlr.internal.InternalFigureParser;
import org.xtext.ipsl.figure.services.FigureGrammarAccess;

public class FigureParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(FigureGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, FigureGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getFIGUREAccess().getNomAlternatives_1_0(), "rule__FIGURE__NomAlternatives_1_0");
			builder.put(grammarAccess.getRETOURAccess().getAlternatives(), "rule__RETOUR__Alternatives");
			builder.put(grammarAccess.getFIGUREAccess().getGroup(), "rule__FIGURE__Group__0");
			builder.put(grammarAccess.getCARREAccess().getGroup(), "rule__CARRE__Group__0");
			builder.put(grammarAccess.getCARREAccess().getGroup_2(), "rule__CARRE__Group_2__0");
			builder.put(grammarAccess.getRECTANGLEAccess().getGroup(), "rule__RECTANGLE__Group__0");
			builder.put(grammarAccess.getRECTANGLEAccess().getGroup_2_0(), "rule__RECTANGLE__Group_2_0__0");
			builder.put(grammarAccess.getRECTANGLEAccess().getGroup_2_1(), "rule__RECTANGLE__Group_2_1__0");
			builder.put(grammarAccess.getCERCLEAccess().getGroup(), "rule__CERCLE__Group__0");
			builder.put(grammarAccess.getCERCLEAccess().getGroup_2(), "rule__CERCLE__Group_2__0");
			builder.put(grammarAccess.getRETURNAccess().getGroup(), "rule__RETURN__Group__0");
			builder.put(grammarAccess.getPROGRAMMEAccess().getFigAssignment(), "rule__PROGRAMME__FigAssignment");
			builder.put(grammarAccess.getFIGUREAccess().getNomAssignment_1(), "rule__FIGURE__NomAssignment_1");
			builder.put(grammarAccess.getCARREAccess().getNomAssignment_0(), "rule__CARRE__NomAssignment_0");
			builder.put(grammarAccess.getCARREAccess().getDebutAssignment_1(), "rule__CARRE__DebutAssignment_1");
			builder.put(grammarAccess.getCARREAccess().getCoteAssignment_2_2(), "rule__CARRE__CoteAssignment_2_2");
			builder.put(grammarAccess.getCARREAccess().getRetourAssignment_3(), "rule__CARRE__RetourAssignment_3");
			builder.put(grammarAccess.getCARREAccess().getEndAssignment_4(), "rule__CARRE__EndAssignment_4");
			builder.put(grammarAccess.getRECTANGLEAccess().getNomAssignment_0(), "rule__RECTANGLE__NomAssignment_0");
			builder.put(grammarAccess.getRECTANGLEAccess().getDebutAssignment_1(), "rule__RECTANGLE__DebutAssignment_1");
			builder.put(grammarAccess.getRECTANGLEAccess().getLongueurAssignment_2_0_2(), "rule__RECTANGLE__LongueurAssignment_2_0_2");
			builder.put(grammarAccess.getRECTANGLEAccess().getLargeurAssignment_2_1_2(), "rule__RECTANGLE__LargeurAssignment_2_1_2");
			builder.put(grammarAccess.getRECTANGLEAccess().getRetourAssignment_3(), "rule__RECTANGLE__RetourAssignment_3");
			builder.put(grammarAccess.getRECTANGLEAccess().getEndAssignment_4(), "rule__RECTANGLE__EndAssignment_4");
			builder.put(grammarAccess.getCERCLEAccess().getNomAssignment_0(), "rule__CERCLE__NomAssignment_0");
			builder.put(grammarAccess.getCERCLEAccess().getDebutAssignment_1(), "rule__CERCLE__DebutAssignment_1");
			builder.put(grammarAccess.getCERCLEAccess().getRayonAssignment_2_2(), "rule__CERCLE__RayonAssignment_2_2");
			builder.put(grammarAccess.getCERCLEAccess().getRetourAssignment_3(), "rule__CERCLE__RetourAssignment_3");
			builder.put(grammarAccess.getCERCLEAccess().getEndAssignment_4(), "rule__CERCLE__EndAssignment_4");
			builder.put(grammarAccess.getRETURNAccess().getResultatAssignment_1(), "rule__RETURN__ResultatAssignment_1");
			builder.put(grammarAccess.getREELAccess().getReelAssignment(), "rule__REEL__ReelAssignment");
			builder.put(grammarAccess.getRECTANGLEAccess().getUnorderedGroup_2(), "rule__RECTANGLE__UnorderedGroup_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private FigureGrammarAccess grammarAccess;

	@Override
	protected InternalFigureParser createParser() {
		InternalFigureParser result = new InternalFigureParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FigureGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FigureGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
