/*
 * generated by Xtext 2.30.0
 */
package org.xtext.ipsl.airport.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ipsl.airport.ide.contentassist.antlr.internal.InternalAirPortParser;
import org.xtext.ipsl.airport.services.AirPortGrammarAccess;

public class AirPortParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AirPortGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AirPortGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getAlternatives_0(), "rule__Model__Alternatives_0");
			builder.put(grammarAccess.getMoteursAccess().getAlternatives(), "rule__Moteurs__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getAvionAccess().getGroup(), "rule__Avion__Group__0");
			builder.put(grammarAccess.getAvionAccess().getGroup_3_0(), "rule__Avion__Group_3_0__0");
			builder.put(grammarAccess.getAvionAccess().getGroup_3_1(), "rule__Avion__Group_3_1__0");
			builder.put(grammarAccess.getAeroportAccess().getGroup(), "rule__Aeroport__Group__0");
			builder.put(grammarAccess.getAeroportAccess().getGroup_3_0(), "rule__Aeroport__Group_3_0__0");
			builder.put(grammarAccess.getAeroportAccess().getGroup_3_1(), "rule__Aeroport__Group_3_1__0");
			builder.put(grammarAccess.getAeroportAccess().getGroup_3_2(), "rule__Aeroport__Group_3_2__0");
			builder.put(grammarAccess.getLigneAccess().getGroup(), "rule__Ligne__Group__0");
			builder.put(grammarAccess.getLigneAccess().getGroup_3_0(), "rule__Ligne__Group_3_0__0");
			builder.put(grammarAccess.getLigneAccess().getGroup_3_1(), "rule__Ligne__Group_3_1__0");
			builder.put(grammarAccess.getLigneAccess().getGroup_3_2(), "rule__Ligne__Group_3_2__0");
			builder.put(grammarAccess.getLigneAccess().getGroup_3_3(), "rule__Ligne__Group_3_3__0");
			builder.put(grammarAccess.getLigneAccess().getGroup_3_4(), "rule__Ligne__Group_3_4__0");
			builder.put(grammarAccess.getModelAccess().getAvionsAssignment_0_0(), "rule__Model__AvionsAssignment_0_0");
			builder.put(grammarAccess.getModelAccess().getAeroportsAssignment_0_1(), "rule__Model__AeroportsAssignment_0_1");
			builder.put(grammarAccess.getModelAccess().getLignesAssignment_1(), "rule__Model__LignesAssignment_1");
			builder.put(grammarAccess.getAvionAccess().getNameAssignment_1(), "rule__Avion__NameAssignment_1");
			builder.put(grammarAccess.getAvionAccess().getPassagersAssignment_3_0_2(), "rule__Avion__PassagersAssignment_3_0_2");
			builder.put(grammarAccess.getAvionAccess().getMotorisationAssignment_3_1_2(), "rule__Avion__MotorisationAssignment_3_1_2");
			builder.put(grammarAccess.getAeroportAccess().getNomAssignment_1(), "rule__Aeroport__NomAssignment_1");
			builder.put(grammarAccess.getAeroportAccess().getNameAssignment_3_0_2(), "rule__Aeroport__NameAssignment_3_0_2");
			builder.put(grammarAccess.getAeroportAccess().getPaysAssignment_3_1_2(), "rule__Aeroport__PaysAssignment_3_1_2");
			builder.put(grammarAccess.getAeroportAccess().getPistesAssignment_3_2_2(), "rule__Aeroport__PistesAssignment_3_2_2");
			builder.put(grammarAccess.getLigneAccess().getNameAssignment_1(), "rule__Ligne__NameAssignment_1");
			builder.put(grammarAccess.getLigneAccess().getAvionAssignment_3_0_2(), "rule__Ligne__AvionAssignment_3_0_2");
			builder.put(grammarAccess.getLigneAccess().getCompagnieAssignment_3_1_2(), "rule__Ligne__CompagnieAssignment_3_1_2");
			builder.put(grammarAccess.getLigneAccess().getDepartAssignment_3_2_2(), "rule__Ligne__DepartAssignment_3_2_2");
			builder.put(grammarAccess.getLigneAccess().getArriveeAssignment_3_3_2(), "rule__Ligne__ArriveeAssignment_3_3_2");
			builder.put(grammarAccess.getLigneAccess().getDureeAssignment_3_4_2(), "rule__Ligne__DureeAssignment_3_4_2");
			builder.put(grammarAccess.getLigneAccess().getRegularAssignment_3_5(), "rule__Ligne__RegularAssignment_3_5");
			builder.put(grammarAccess.getCodeOACIAccess().getNameAssignment(), "rule__CodeOACI__NameAssignment");
			builder.put(grammarAccess.getAvionAccess().getUnorderedGroup_3(), "rule__Avion__UnorderedGroup_3");
			builder.put(grammarAccess.getAeroportAccess().getUnorderedGroup_3(), "rule__Aeroport__UnorderedGroup_3");
			builder.put(grammarAccess.getLigneAccess().getUnorderedGroup_3(), "rule__Ligne__UnorderedGroup_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AirPortGrammarAccess grammarAccess;

	@Override
	protected InternalAirPortParser createParser() {
		InternalAirPortParser result = new InternalAirPortParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AirPortGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AirPortGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
