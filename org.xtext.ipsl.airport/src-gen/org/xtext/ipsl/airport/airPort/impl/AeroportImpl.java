/**
 * generated by Xtext 2.30.0
 */
package org.xtext.ipsl.airport.airPort.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.ipsl.airport.airPort.Aeroport;
import org.xtext.ipsl.airport.airPort.AirPortPackage;
import org.xtext.ipsl.airport.airPort.CodeOACI;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Aeroport</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.ipsl.airport.airPort.impl.AeroportImpl#getNom <em>Nom</em>}</li>
 *   <li>{@link org.xtext.ipsl.airport.airPort.impl.AeroportImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.ipsl.airport.airPort.impl.AeroportImpl#getPays <em>Pays</em>}</li>
 *   <li>{@link org.xtext.ipsl.airport.airPort.impl.AeroportImpl#getPistes <em>Pistes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AeroportImpl extends MinimalEObjectImpl.Container implements Aeroport
{
  /**
   * The default value of the '{@link #getNom() <em>Nom</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNom()
   * @generated
   * @ordered
   */
  protected static final String NOM_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNom() <em>Nom</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNom()
   * @generated
   * @ordered
   */
  protected String nom = NOM_EDEFAULT;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected CodeOACI name;

  /**
   * The default value of the '{@link #getPays() <em>Pays</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPays()
   * @generated
   * @ordered
   */
  protected static final String PAYS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPays() <em>Pays</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPays()
   * @generated
   * @ordered
   */
  protected String pays = PAYS_EDEFAULT;

  /**
   * The default value of the '{@link #getPistes() <em>Pistes</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPistes()
   * @generated
   * @ordered
   */
  protected static final int PISTES_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getPistes() <em>Pistes</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPistes()
   * @generated
   * @ordered
   */
  protected int pistes = PISTES_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AeroportImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AirPortPackage.Literals.AEROPORT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNom()
  {
    return nom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNom(String newNom)
  {
    String oldNom = nom;
    nom = newNom;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirPortPackage.AEROPORT__NOM, oldNom, nom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CodeOACI getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetName(CodeOACI newName, NotificationChain msgs)
  {
    CodeOACI oldName = name;
    name = newName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AirPortPackage.AEROPORT__NAME, oldName, newName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(CodeOACI newName)
  {
    if (newName != name)
    {
      NotificationChain msgs = null;
      if (name != null)
        msgs = ((InternalEObject)name).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AirPortPackage.AEROPORT__NAME, null, msgs);
      if (newName != null)
        msgs = ((InternalEObject)newName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AirPortPackage.AEROPORT__NAME, null, msgs);
      msgs = basicSetName(newName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirPortPackage.AEROPORT__NAME, newName, newName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPays()
  {
    return pays;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPays(String newPays)
  {
    String oldPays = pays;
    pays = newPays;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirPortPackage.AEROPORT__PAYS, oldPays, pays));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getPistes()
  {
    return pistes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPistes(int newPistes)
  {
    int oldPistes = pistes;
    pistes = newPistes;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AirPortPackage.AEROPORT__PISTES, oldPistes, pistes));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AirPortPackage.AEROPORT__NAME:
        return basicSetName(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AirPortPackage.AEROPORT__NOM:
        return getNom();
      case AirPortPackage.AEROPORT__NAME:
        return getName();
      case AirPortPackage.AEROPORT__PAYS:
        return getPays();
      case AirPortPackage.AEROPORT__PISTES:
        return getPistes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AirPortPackage.AEROPORT__NOM:
        setNom((String)newValue);
        return;
      case AirPortPackage.AEROPORT__NAME:
        setName((CodeOACI)newValue);
        return;
      case AirPortPackage.AEROPORT__PAYS:
        setPays((String)newValue);
        return;
      case AirPortPackage.AEROPORT__PISTES:
        setPistes((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AirPortPackage.AEROPORT__NOM:
        setNom(NOM_EDEFAULT);
        return;
      case AirPortPackage.AEROPORT__NAME:
        setName((CodeOACI)null);
        return;
      case AirPortPackage.AEROPORT__PAYS:
        setPays(PAYS_EDEFAULT);
        return;
      case AirPortPackage.AEROPORT__PISTES:
        setPistes(PISTES_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AirPortPackage.AEROPORT__NOM:
        return NOM_EDEFAULT == null ? nom != null : !NOM_EDEFAULT.equals(nom);
      case AirPortPackage.AEROPORT__NAME:
        return name != null;
      case AirPortPackage.AEROPORT__PAYS:
        return PAYS_EDEFAULT == null ? pays != null : !PAYS_EDEFAULT.equals(pays);
      case AirPortPackage.AEROPORT__PISTES:
        return pistes != PISTES_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (nom: ");
    result.append(nom);
    result.append(", pays: ");
    result.append(pays);
    result.append(", pistes: ");
    result.append(pistes);
    result.append(')');
    return result.toString();
  }

} //AeroportImpl
