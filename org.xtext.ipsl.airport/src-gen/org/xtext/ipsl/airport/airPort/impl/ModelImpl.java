/**
 * generated by Xtext 2.30.0
 */
package org.xtext.ipsl.airport.airPort.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.ipsl.airport.airPort.Aeroport;
import org.xtext.ipsl.airport.airPort.AirPortPackage;
import org.xtext.ipsl.airport.airPort.Avion;
import org.xtext.ipsl.airport.airPort.Ligne;
import org.xtext.ipsl.airport.airPort.Model;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.ipsl.airport.airPort.impl.ModelImpl#getAvions <em>Avions</em>}</li>
 *   <li>{@link org.xtext.ipsl.airport.airPort.impl.ModelImpl#getAeroports <em>Aeroports</em>}</li>
 *   <li>{@link org.xtext.ipsl.airport.airPort.impl.ModelImpl#getLignes <em>Lignes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The cached value of the '{@link #getAvions() <em>Avions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAvions()
   * @generated
   * @ordered
   */
  protected EList<Avion> avions;

  /**
   * The cached value of the '{@link #getAeroports() <em>Aeroports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAeroports()
   * @generated
   * @ordered
   */
  protected EList<Aeroport> aeroports;

  /**
   * The cached value of the '{@link #getLignes() <em>Lignes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLignes()
   * @generated
   * @ordered
   */
  protected EList<Ligne> lignes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AirPortPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Avion> getAvions()
  {
    if (avions == null)
    {
      avions = new EObjectContainmentEList<Avion>(Avion.class, this, AirPortPackage.MODEL__AVIONS);
    }
    return avions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Aeroport> getAeroports()
  {
    if (aeroports == null)
    {
      aeroports = new EObjectContainmentEList<Aeroport>(Aeroport.class, this, AirPortPackage.MODEL__AEROPORTS);
    }
    return aeroports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Ligne> getLignes()
  {
    if (lignes == null)
    {
      lignes = new EObjectContainmentEList<Ligne>(Ligne.class, this, AirPortPackage.MODEL__LIGNES);
    }
    return lignes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AirPortPackage.MODEL__AVIONS:
        return ((InternalEList<?>)getAvions()).basicRemove(otherEnd, msgs);
      case AirPortPackage.MODEL__AEROPORTS:
        return ((InternalEList<?>)getAeroports()).basicRemove(otherEnd, msgs);
      case AirPortPackage.MODEL__LIGNES:
        return ((InternalEList<?>)getLignes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AirPortPackage.MODEL__AVIONS:
        return getAvions();
      case AirPortPackage.MODEL__AEROPORTS:
        return getAeroports();
      case AirPortPackage.MODEL__LIGNES:
        return getLignes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AirPortPackage.MODEL__AVIONS:
        getAvions().clear();
        getAvions().addAll((Collection<? extends Avion>)newValue);
        return;
      case AirPortPackage.MODEL__AEROPORTS:
        getAeroports().clear();
        getAeroports().addAll((Collection<? extends Aeroport>)newValue);
        return;
      case AirPortPackage.MODEL__LIGNES:
        getLignes().clear();
        getLignes().addAll((Collection<? extends Ligne>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AirPortPackage.MODEL__AVIONS:
        getAvions().clear();
        return;
      case AirPortPackage.MODEL__AEROPORTS:
        getAeroports().clear();
        return;
      case AirPortPackage.MODEL__LIGNES:
        getLignes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AirPortPackage.MODEL__AVIONS:
        return avions != null && !avions.isEmpty();
      case AirPortPackage.MODEL__AEROPORTS:
        return aeroports != null && !aeroports.isEmpty();
      case AirPortPackage.MODEL__LIGNES:
        return lignes != null && !lignes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ModelImpl
