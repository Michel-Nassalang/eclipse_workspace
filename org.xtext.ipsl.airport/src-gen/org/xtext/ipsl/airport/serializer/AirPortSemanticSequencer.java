/*
 * generated by Xtext 2.30.0
 */
package org.xtext.ipsl.airport.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.ipsl.airport.airPort.Aeroport;
import org.xtext.ipsl.airport.airPort.AirPortPackage;
import org.xtext.ipsl.airport.airPort.Avion;
import org.xtext.ipsl.airport.airPort.CodeOACI;
import org.xtext.ipsl.airport.airPort.Ligne;
import org.xtext.ipsl.airport.airPort.Model;
import org.xtext.ipsl.airport.services.AirPortGrammarAccess;

@SuppressWarnings("all")
public class AirPortSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AirPortGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AirPortPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AirPortPackage.AEROPORT:
				sequence_Aeroport(context, (Aeroport) semanticObject); 
				return; 
			case AirPortPackage.AVION:
				sequence_Avion(context, (Avion) semanticObject); 
				return; 
			case AirPortPackage.CODE_OACI:
				sequence_CodeOACI(context, (CodeOACI) semanticObject); 
				return; 
			case AirPortPackage.LIGNE:
				sequence_Ligne(context, (Ligne) semanticObject); 
				return; 
			case AirPortPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Aeroport returns Aeroport
	 *
	 * Constraint:
	 *     (nom=STRING (name=CodeOACI | pays=STRING | pistes=INT)+)
	 * </pre>
	 */
	protected void sequence_Aeroport(ISerializationContext context, Aeroport semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Avion returns Avion
	 *
	 * Constraint:
	 *     (name=ID (passagers=INT | motorisation=Moteurs)+)
	 * </pre>
	 */
	protected void sequence_Avion(ISerializationContext context, Avion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CodeOACI returns CodeOACI
	 *
	 * Constraint:
	 *     name=OACI
	 * </pre>
	 */
	protected void sequence_CodeOACI(ISerializationContext context, CodeOACI semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AirPortPackage.Literals.CODE_OACI__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AirPortPackage.Literals.CODE_OACI__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCodeOACIAccess().getNameOACITerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Ligne returns Ligne
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         (
	 *             avion=[Avion|ID] | 
	 *             compagnie=STRING | 
	 *             depart=[CodeOACI|OACI] | 
	 *             arrivee=[CodeOACI|OACI] | 
	 *             duree=DURATION | 
	 *             regular?='REGULIERE;'
	 *         )*
	 *     )
	 * </pre>
	 */
	protected void sequence_Ligne(ISerializationContext context, Ligne semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (((avions+=Avion | aeroports+=Aeroport)+ lignes+=Ligne+) | lignes+=Ligne+)?
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
