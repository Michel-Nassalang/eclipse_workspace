/*
 * generated by Xtext 2.29.0
 */
package org.xtext.ipsl.calcul.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CalculGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class CALCULElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ipsl.calcul.Calcul.CALCUL");
		private final Assignment cOperationAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOperationSTATISTIQUEParserRuleCall_0 = (RuleCall)cOperationAssignment.eContents().get(0);
		
		//CALCUL:
		//    (operation=STATISTIQUE)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(operation=STATISTIQUE)?
		public Assignment getOperationAssignment() { return cOperationAssignment; }
		
		//STATISTIQUE
		public RuleCall getOperationSTATISTIQUEParserRuleCall_0() { return cOperationSTATISTIQUEParserRuleCall_0; }
	}
	public class STATISTIQUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ipsl.calcul.Calcul.STATISTIQUE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomIDTerminalRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Assignment cDebutAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDebutDEBUTParserRuleCall_2_0 = (RuleCall)cDebutAssignment_2.eContents().get(0);
		private final Keyword cModKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cModaliteAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModaliteMODALITEParserRuleCall_4_0 = (RuleCall)cModaliteAssignment_4.eContents().get(0);
		private final Keyword cEffKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEffectifAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEffectifEFFECTIFParserRuleCall_6_0 = (RuleCall)cEffectifAssignment_6.eContents().get(0);
		private final Keyword cReturnKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cResultatAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cResultatRETOURParserRuleCall_8_0 = (RuleCall)cResultatAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cEndAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cEndENDParserRuleCall_10_0 = (RuleCall)cEndAssignment_10.eContents().get(0);
		
		//STATISTIQUE:
		//    'program' nom=ID
		//    debut=DEBUT
		//    'mod:' modalite=MODALITE
		//    'eff:' effectif=EFFECTIF
		//    'return' resultat=RETOUR ';'
		//    end=END;
		@Override public ParserRule getRule() { return rule; }
		
		//'program' nom=ID
		//debut=DEBUT
		//'mod:' modalite=MODALITE
		//'eff:' effectif=EFFECTIF
		//'return' resultat=RETOUR ';'
		//end=END
		public Group getGroup() { return cGroup; }
		
		//'program'
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }
		
		//nom=ID
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }
		
		//ID
		public RuleCall getNomIDTerminalRuleCall_1_0() { return cNomIDTerminalRuleCall_1_0; }
		
		//debut=DEBUT
		public Assignment getDebutAssignment_2() { return cDebutAssignment_2; }
		
		//DEBUT
		public RuleCall getDebutDEBUTParserRuleCall_2_0() { return cDebutDEBUTParserRuleCall_2_0; }
		
		//'mod:'
		public Keyword getModKeyword_3() { return cModKeyword_3; }
		
		//modalite=MODALITE
		public Assignment getModaliteAssignment_4() { return cModaliteAssignment_4; }
		
		//MODALITE
		public RuleCall getModaliteMODALITEParserRuleCall_4_0() { return cModaliteMODALITEParserRuleCall_4_0; }
		
		//'eff:'
		public Keyword getEffKeyword_5() { return cEffKeyword_5; }
		
		//effectif=EFFECTIF
		public Assignment getEffectifAssignment_6() { return cEffectifAssignment_6; }
		
		//EFFECTIF
		public RuleCall getEffectifEFFECTIFParserRuleCall_6_0() { return cEffectifEFFECTIFParserRuleCall_6_0; }
		
		//'return'
		public Keyword getReturnKeyword_7() { return cReturnKeyword_7; }
		
		//resultat=RETOUR
		public Assignment getResultatAssignment_8() { return cResultatAssignment_8; }
		
		//RETOUR
		public RuleCall getResultatRETOURParserRuleCall_8_0() { return cResultatRETOURParserRuleCall_8_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
		
		//end=END
		public Assignment getEndAssignment_10() { return cEndAssignment_10; }
		
		//END
		public RuleCall getEndENDParserRuleCall_10_0() { return cEndENDParserRuleCall_10_0; }
	}
	public class DEBUTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ipsl.calcul.Calcul.DEBUT");
		private final Keyword cBeginKeyword = (Keyword)rule.eContents().get(1);
		
		//DEBUT: 'begin';
		@Override public ParserRule getRule() { return rule; }
		
		//'begin'
		public Keyword getBeginKeyword() { return cBeginKeyword; }
	}
	public class MODALITEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ipsl.calcul.Calcul.MODALITE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesREELTerminalRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesREELTerminalRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MODALITE:
		//    'mod:' values+=REEL (',' values+=REEL)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'mod:' values+=REEL (',' values+=REEL)* ';'
		public Group getGroup() { return cGroup; }
		
		//'mod:'
		public Keyword getModKeyword_0() { return cModKeyword_0; }
		
		//values+=REEL
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }
		
		//REEL
		public RuleCall getValuesREELTerminalRuleCall_1_0() { return cValuesREELTerminalRuleCall_1_0; }
		
		//(',' values+=REEL)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//values+=REEL
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }
		
		//REEL
		public RuleCall getValuesREELTerminalRuleCall_2_1_0() { return cValuesREELTerminalRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class EFFECTIFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ipsl.calcul.Calcul.EFFECTIF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesREELTerminalRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesREELTerminalRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EFFECTIF:
		//    'eff:' values+=REEL (',' values+=REEL)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'eff:' values+=REEL (',' values+=REEL)* ';'
		public Group getGroup() { return cGroup; }
		
		//'eff:'
		public Keyword getEffKeyword_0() { return cEffKeyword_0; }
		
		//values+=REEL
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }
		
		//REEL
		public RuleCall getValuesREELTerminalRuleCall_1_0() { return cValuesREELTerminalRuleCall_1_0; }
		
		//(',' values+=REEL)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//values+=REEL
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }
		
		//REEL
		public RuleCall getValuesREELTerminalRuleCall_2_1_0() { return cValuesREELTerminalRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class RETOURElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ipsl.calcul.Calcul.RETOUR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMoyenneKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cModeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVarianceKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cEcartTypeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//RETOUR: ('moyenne' | 'mode' | 'variance' | 'ecart-type');
		@Override public ParserRule getRule() { return rule; }
		
		//('moyenne' | 'mode' | 'variance' | 'ecart-type')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'moyenne'
		public Keyword getMoyenneKeyword_0() { return cMoyenneKeyword_0; }
		
		//'mode'
		public Keyword getModeKeyword_1() { return cModeKeyword_1; }
		
		//'variance'
		public Keyword getVarianceKeyword_2() { return cVarianceKeyword_2; }
		
		//'ecart-type'
		public Keyword getEcartTypeKeyword_3() { return cEcartTypeKeyword_3; }
	}
	public class ENDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ipsl.calcul.Calcul.END");
		private final Keyword cEndKeyword = (Keyword)rule.eContents().get(1);
		
		//END: 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'end'
		public Keyword getEndKeyword() { return cEndKeyword; }
	}
	
	
	private final CALCULElements pCALCUL;
	private final STATISTIQUEElements pSTATISTIQUE;
	private final DEBUTElements pDEBUT;
	private final MODALITEElements pMODALITE;
	private final EFFECTIFElements pEFFECTIF;
	private final RETOURElements pRETOUR;
	private final ENDElements pEND;
	private final TerminalRule tREEL;
	private final TerminalRule tINT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CalculGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCALCUL = new CALCULElements();
		this.pSTATISTIQUE = new STATISTIQUEElements();
		this.pDEBUT = new DEBUTElements();
		this.pMODALITE = new MODALITEElements();
		this.pEFFECTIF = new EFFECTIFElements();
		this.pRETOUR = new RETOURElements();
		this.pEND = new ENDElements();
		this.tREEL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ipsl.calcul.Calcul.REEL");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ipsl.calcul.Calcul.INT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.ipsl.calcul.Calcul".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CALCUL:
	//    (operation=STATISTIQUE)?;
	public CALCULElements getCALCULAccess() {
		return pCALCUL;
	}
	
	public ParserRule getCALCULRule() {
		return getCALCULAccess().getRule();
	}
	
	//STATISTIQUE:
	//    'program' nom=ID
	//    debut=DEBUT
	//    'mod:' modalite=MODALITE
	//    'eff:' effectif=EFFECTIF
	//    'return' resultat=RETOUR ';'
	//    end=END;
	public STATISTIQUEElements getSTATISTIQUEAccess() {
		return pSTATISTIQUE;
	}
	
	public ParserRule getSTATISTIQUERule() {
		return getSTATISTIQUEAccess().getRule();
	}
	
	//DEBUT: 'begin';
	public DEBUTElements getDEBUTAccess() {
		return pDEBUT;
	}
	
	public ParserRule getDEBUTRule() {
		return getDEBUTAccess().getRule();
	}
	
	//MODALITE:
	//    'mod:' values+=REEL (',' values+=REEL)* ';';
	public MODALITEElements getMODALITEAccess() {
		return pMODALITE;
	}
	
	public ParserRule getMODALITERule() {
		return getMODALITEAccess().getRule();
	}
	
	//EFFECTIF:
	//    'eff:' values+=REEL (',' values+=REEL)* ';';
	public EFFECTIFElements getEFFECTIFAccess() {
		return pEFFECTIF;
	}
	
	public ParserRule getEFFECTIFRule() {
		return getEFFECTIFAccess().getRule();
	}
	
	//RETOUR: ('moyenne' | 'mode' | 'variance' | 'ecart-type');
	public RETOURElements getRETOURAccess() {
		return pRETOUR;
	}
	
	public ParserRule getRETOURRule() {
		return getRETOURAccess().getRule();
	}
	
	//END: 'end';
	public ENDElements getENDAccess() {
		return pEND;
	}
	
	public ParserRule getENDRule() {
		return getENDAccess().getRule();
	}
	
	//terminal REEL returns ecore::EDouble:
	//    '-'? INT? ('.' INT)?;
	public TerminalRule getREELRule() {
		return tREEL;
	}
	
	//terminal INT returns ecore::EInt:
	//    ('0'..'9')+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
