/*
 * generated by Xtext 2.29.0
 */
grammar InternalCalcul;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.ipsl.calcul.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.ipsl.calcul.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.ipsl.calcul.services.CalculGrammarAccess;

}

@parser::members {

 	private CalculGrammarAccess grammarAccess;

    public InternalCalculParser(TokenStream input, CalculGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "CALCUL";
   	}

   	@Override
   	protected CalculGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCALCUL
entryRuleCALCUL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCALCULRule()); }
	iv_ruleCALCUL=ruleCALCUL
	{ $current=$iv_ruleCALCUL.current; }
	EOF;

// Rule CALCUL
ruleCALCUL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getCALCULAccess().getOperationSTATISTIQUEParserRuleCall_0());
			}
			lv_operation_0_0=ruleSTATISTIQUE
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getCALCULRule());
				}
				set(
					$current,
					"operation",
					lv_operation_0_0,
					"org.xtext.ipsl.calcul.Calcul.STATISTIQUE");
				afterParserOrEnumRuleCall();
			}
		)
	)?
;

// Entry rule entryRuleSTATISTIQUE
entryRuleSTATISTIQUE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTATISTIQUERule()); }
	iv_ruleSTATISTIQUE=ruleSTATISTIQUE
	{ $current=$iv_ruleSTATISTIQUE.current; }
	EOF;

// Rule STATISTIQUE
ruleSTATISTIQUE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='program'
		{
			newLeafNode(otherlv_0, grammarAccess.getSTATISTIQUEAccess().getProgramKeyword_0());
		}
		(
			(
				lv_nom_1_0=RULE_ID
				{
					newLeafNode(lv_nom_1_0, grammarAccess.getSTATISTIQUEAccess().getNomIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSTATISTIQUERule());
					}
					setWithLastConsumed(
						$current,
						"nom",
						lv_nom_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSTATISTIQUEAccess().getDebutDEBUTParserRuleCall_2_0());
				}
				lv_debut_2_0=ruleDEBUT
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTATISTIQUERule());
					}
					set(
						$current,
						"debut",
						lv_debut_2_0,
						"org.xtext.ipsl.calcul.Calcul.DEBUT");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='mod:'
		{
			newLeafNode(otherlv_3, grammarAccess.getSTATISTIQUEAccess().getModKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTATISTIQUEAccess().getModaliteMODALITEParserRuleCall_4_0());
				}
				lv_modalite_4_0=ruleMODALITE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTATISTIQUERule());
					}
					set(
						$current,
						"modalite",
						lv_modalite_4_0,
						"org.xtext.ipsl.calcul.Calcul.MODALITE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='eff:'
		{
			newLeafNode(otherlv_5, grammarAccess.getSTATISTIQUEAccess().getEffKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTATISTIQUEAccess().getEffectifEFFECTIFParserRuleCall_6_0());
				}
				lv_effectif_6_0=ruleEFFECTIF
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTATISTIQUERule());
					}
					set(
						$current,
						"effectif",
						lv_effectif_6_0,
						"org.xtext.ipsl.calcul.Calcul.EFFECTIF");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='return'
		{
			newLeafNode(otherlv_7, grammarAccess.getSTATISTIQUEAccess().getReturnKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTATISTIQUEAccess().getResultatRETOURParserRuleCall_8_0());
				}
				lv_resultat_8_0=ruleRETOUR
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTATISTIQUERule());
					}
					set(
						$current,
						"resultat",
						lv_resultat_8_0,
						"org.xtext.ipsl.calcul.Calcul.RETOUR");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9=';'
		{
			newLeafNode(otherlv_9, grammarAccess.getSTATISTIQUEAccess().getSemicolonKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTATISTIQUEAccess().getEndENDParserRuleCall_10_0());
				}
				lv_end_10_0=ruleEND
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTATISTIQUERule());
					}
					set(
						$current,
						"end",
						lv_end_10_0,
						"org.xtext.ipsl.calcul.Calcul.END");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDEBUT
entryRuleDEBUT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDEBUTRule()); }
	iv_ruleDEBUT=ruleDEBUT
	{ $current=$iv_ruleDEBUT.current.getText(); }
	EOF;

// Rule DEBUT
ruleDEBUT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='begin'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getDEBUTAccess().getBeginKeyword());
	}
;

// Entry rule entryRuleMODALITE
entryRuleMODALITE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMODALITERule()); }
	iv_ruleMODALITE=ruleMODALITE
	{ $current=$iv_ruleMODALITE.current; }
	EOF;

// Rule MODALITE
ruleMODALITE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='mod:'
		{
			newLeafNode(otherlv_0, grammarAccess.getMODALITEAccess().getModKeyword_0());
		}
		(
			(
				lv_values_1_0=RULE_REEL
				{
					newLeafNode(lv_values_1_0, grammarAccess.getMODALITEAccess().getValuesREELTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMODALITERule());
					}
					addWithLastConsumed(
						$current,
						"values",
						lv_values_1_0,
						"org.xtext.ipsl.calcul.Calcul.REEL");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getMODALITEAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_values_3_0=RULE_REEL
					{
						newLeafNode(lv_values_3_0, grammarAccess.getMODALITEAccess().getValuesREELTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMODALITERule());
						}
						addWithLastConsumed(
							$current,
							"values",
							lv_values_3_0,
							"org.xtext.ipsl.calcul.Calcul.REEL");
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getMODALITEAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleEFFECTIF
entryRuleEFFECTIF returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEFFECTIFRule()); }
	iv_ruleEFFECTIF=ruleEFFECTIF
	{ $current=$iv_ruleEFFECTIF.current; }
	EOF;

// Rule EFFECTIF
ruleEFFECTIF returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='eff:'
		{
			newLeafNode(otherlv_0, grammarAccess.getEFFECTIFAccess().getEffKeyword_0());
		}
		(
			(
				lv_values_1_0=RULE_REEL
				{
					newLeafNode(lv_values_1_0, grammarAccess.getEFFECTIFAccess().getValuesREELTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEFFECTIFRule());
					}
					addWithLastConsumed(
						$current,
						"values",
						lv_values_1_0,
						"org.xtext.ipsl.calcul.Calcul.REEL");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getEFFECTIFAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_values_3_0=RULE_REEL
					{
						newLeafNode(lv_values_3_0, grammarAccess.getEFFECTIFAccess().getValuesREELTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEFFECTIFRule());
						}
						addWithLastConsumed(
							$current,
							"values",
							lv_values_3_0,
							"org.xtext.ipsl.calcul.Calcul.REEL");
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getEFFECTIFAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleRETOUR
entryRuleRETOUR returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRETOURRule()); }
	iv_ruleRETOUR=ruleRETOUR
	{ $current=$iv_ruleRETOUR.current.getText(); }
	EOF;

// Rule RETOUR
ruleRETOUR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='moyenne'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRETOURAccess().getMoyenneKeyword_0());
		}
		    |
		kw='mode'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRETOURAccess().getModeKeyword_1());
		}
		    |
		kw='variance'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRETOURAccess().getVarianceKeyword_2());
		}
		    |
		kw='ecart-type'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRETOURAccess().getEcartTypeKeyword_3());
		}
	)
;

// Entry rule entryRuleEND
entryRuleEND returns [String current=null]:
	{ newCompositeNode(grammarAccess.getENDRule()); }
	iv_ruleEND=ruleEND
	{ $current=$iv_ruleEND.current.getText(); }
	EOF;

// Rule END
ruleEND returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='end'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getENDAccess().getEndKeyword());
	}
;

RULE_REEL : '-'? RULE_INT? ('.' RULE_INT)?;

fragment RULE_INT : ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
